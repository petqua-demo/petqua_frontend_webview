{"ast":null,"code":"var _jsxFileName = \"/Users/iseung-won/Desktop/clone/frontend/src/MyComponent.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { dismissAll, dismissDrawer, presentDrawer } from './components/drawer/DrawerAction';\nimport { DrawerPosition } from './components/drawer/types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyComponent = () => {\n  _s();\n  // Use the drawer state from Redux\n  // const drawerState = useSelector((state) => state.drawer);\n\n  const drawerState = useSelector(state => state.drawer);\n\n  // Dispatch function to dispatch actions\n\n  const dispatch = useDispatch();\n\n  // Open a new drawer item\n  const handleOpenDrawer = drawerPayload => {\n    console.log('drawerPayload', drawerPayload);\n    dispatch(presentDrawer(drawerPayload));\n  };\n\n  // Close a specific drawer item\n  const handleCloseDrawer = drawerId => {\n    dispatch(dismissDrawer(drawerId));\n  };\n\n  // Close all drawers\n  const handleCloseAllDrawers = () => {\n    dispatch(dismissAll());\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleOpenDrawer({\n        id: 'sampleId',\n        component: 'SampleComponent',\n        position: DrawerPosition.BOTTOM\n        //...other drawer properties\n      }),\n      children: \"Open New Drawer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCloseAllDrawers,\n      children: \"Close All Drawers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(MyComponent, \"b4HXCIZTjnRXl6BTVjQXLx01Byk=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = MyComponent;\nexport default MyComponent;\nvar _c;\n$RefreshReg$(_c, \"MyComponent\");","map":{"version":3,"names":["React","useDispatch","useSelector","dismissAll","dismissDrawer","presentDrawer","DrawerPosition","jsxDEV","_jsxDEV","MyComponent","_s","drawerState","state","drawer","dispatch","handleOpenDrawer","drawerPayload","console","log","handleCloseDrawer","drawerId","handleCloseAllDrawers","children","onClick","id","component","position","BOTTOM","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/iseung-won/Desktop/clone/frontend/src/MyComponent.tsx"],"sourcesContent":["import React from 'react';\nimport { AppDispatch } from './redux/store';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { dismissAll, dismissDrawer, presentDrawer } from './components/drawer/DrawerAction';\nimport { DrawerPosition } from './components/drawer/types';\nconst MyComponent = () => {\n  // Use the drawer state from Redux\n  // const drawerState = useSelector((state) => state.drawer);\n\n  const drawerState = useSelector((state: any) => state.drawer);\n\n  // Dispatch function to dispatch actions\n\n  const dispatch = useDispatch<AppDispatch>();\n\n  // Open a new drawer item\n  const handleOpenDrawer = (drawerPayload: any) => {\n    console.log('drawerPayload', drawerPayload);\n    dispatch(presentDrawer(drawerPayload));\n  };\n\n  // Close a specific drawer item\n  const handleCloseDrawer = (drawerId: any) => {\n    dispatch(dismissDrawer(drawerId));\n  };\n\n  // Close all drawers\n  const handleCloseAllDrawers = () => {\n    dispatch(dismissAll());\n  };\n\n  return (\n    <div>\n      {/* Display a button to open a new drawer */}\n      <button\n        onClick={() =>\n          handleOpenDrawer({\n            id: 'sampleId',\n            component: 'SampleComponent',\n            position: DrawerPosition.BOTTOM,\n            //...other drawer properties\n          })\n        }\n      >\n        Open New Drawer\n      </button>\n\n      {/* Display currently open drawers */}\n\n      {/* Button to close all drawers */}\n      <button onClick={handleCloseAllDrawers}>Close All Drawers</button>\n    </div>\n  );\n};\n\nexport default MyComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,UAAU,EAAEC,aAAa,EAAEC,aAAa,QAAQ,kCAAkC;AAC3F,SAASC,cAAc,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC3D,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB;EACA;;EAEA,MAAMC,WAAW,GAAGT,WAAW,CAAEU,KAAU,IAAKA,KAAK,CAACC,MAAM,CAAC;;EAE7D;;EAEA,MAAMC,QAAQ,GAAGb,WAAW,CAAc,CAAC;;EAE3C;EACA,MAAMc,gBAAgB,GAAIC,aAAkB,IAAK;IAC/CC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,aAAa,CAAC;IAC3CF,QAAQ,CAACT,aAAa,CAACW,aAAa,CAAC,CAAC;EACxC,CAAC;;EAED;EACA,MAAMG,iBAAiB,GAAIC,QAAa,IAAK;IAC3CN,QAAQ,CAACV,aAAa,CAACgB,QAAQ,CAAC,CAAC;EACnC,CAAC;;EAED;EACA,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;IAClCP,QAAQ,CAACX,UAAU,CAAC,CAAC,CAAC;EACxB,CAAC;EAED,oBACEK,OAAA;IAAAc,QAAA,gBAEEd,OAAA;MACEe,OAAO,EAAEA,CAAA,KACPR,gBAAgB,CAAC;QACfS,EAAE,EAAE,UAAU;QACdC,SAAS,EAAE,iBAAiB;QAC5BC,QAAQ,EAAEpB,cAAc,CAACqB;QACzB;MACF,CAAC,CACF;MAAAL,QAAA,EACF;IAED;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAKTvB,OAAA;MAAQe,OAAO,EAAEF,qBAAsB;MAAAC,QAAA,EAAC;IAAiB;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/D,CAAC;AAEV,CAAC;AAACrB,EAAA,CAhDID,WAAW;EAAA,QAIKP,WAAW,EAIdD,WAAW;AAAA;AAAA+B,EAAA,GARxBvB,WAAW;AAkDjB,eAAeA,WAAW;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}