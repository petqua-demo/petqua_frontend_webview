{"ast":null,"code":"var _jsxFileName = \"/Users/iseung-won/Desktop/clone/frontend/src/MyComponent.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// import { presentDrawer, dismissDrawer, dismissAll } from './components/drawer/DrawerAction'; // Ensure path is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MyComponent() {\n  _s();\n  // Use the drawer state from Redux\n  const drawerState = useSelector(state => state.drawer);\n\n  // Dispatch function to dispatch actions\n  const dispatch = useDispatch();\n\n  // Open a new drawer item\n  const handleOpenDrawer = drawerPayload => {\n    dispatch(presentDrawer(drawerPayload));\n  };\n\n  // Close a specific drawer item\n  const handleCloseDrawer = drawerId => {\n    dispatch(dismissDrawer(drawerId));\n  };\n\n  // Close all drawers\n  const handleCloseAllDrawers = () => {\n    dispatch(dismissAll());\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleOpenDrawer({\n        id: 'sampleId',\n        component: 'SampleComponent'\n        //...other drawer properties\n      }),\n      children: \"Open New Drawer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), drawerState.items.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleCloseDrawer(item.id),\n        children: \"Close This Drawer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCloseAllDrawers,\n      children: \"Close All Drawers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(MyComponent, \"b4HXCIZTjnRXl6BTVjQXLx01Byk=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = MyComponent;\nexport default MyComponent;\nvar _c;\n$RefreshReg$(_c, \"MyComponent\");","map":{"version":3,"names":["React","useSelector","useDispatch","jsxDEV","_jsxDEV","MyComponent","_s","drawerState","state","drawer","dispatch","handleOpenDrawer","drawerPayload","presentDrawer","handleCloseDrawer","drawerId","dismissDrawer","handleCloseAllDrawers","dismissAll","children","onClick","id","component","fileName","_jsxFileName","lineNumber","columnNumber","items","map","item","_c","$RefreshReg$"],"sources":["/Users/iseung-won/Desktop/clone/frontend/src/MyComponent.jsx"],"sourcesContent":["import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// import { presentDrawer, dismissDrawer, dismissAll } from './components/drawer/DrawerAction'; // Ensure path is correct\n\nfunction MyComponent() {\n  // Use the drawer state from Redux\n  const drawerState = useSelector((state) => state.drawer);\n\n  // Dispatch function to dispatch actions\n  const dispatch = useDispatch();\n\n  // Open a new drawer item\n  const handleOpenDrawer = (drawerPayload) => {\n    dispatch(presentDrawer(drawerPayload));\n  };\n\n  // Close a specific drawer item\n  const handleCloseDrawer = (drawerId) => {\n    dispatch(dismissDrawer(drawerId));\n  };\n\n  // Close all drawers\n  const handleCloseAllDrawers = () => {\n    dispatch(dismissAll());\n  };\n\n  return (\n    <div>\n      {/* Display a button to open a new drawer */}\n      <button\n        onClick={() =>\n          handleOpenDrawer({\n            id: 'sampleId',\n            component: 'SampleComponent',\n            //...other drawer properties\n          })\n        }\n      >\n        Open New Drawer\n      </button>\n\n      {/* Display currently open drawers */}\n      {drawerState.items.map((item) => (\n        <div key={item.id}>\n          {/* Render drawer item */}\n          <button onClick={() => handleCloseDrawer(item.id)}>Close This Drawer</button>\n        </div>\n      ))}\n\n      {/* Button to close all drawers */}\n      <button onClick={handleCloseAllDrawers}>Close All Drawers</button>\n    </div>\n  );\n}\n\nexport default MyComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB;EACA,MAAMC,WAAW,GAAGN,WAAW,CAAEO,KAAK,IAAKA,KAAK,CAACC,MAAM,CAAC;;EAExD;EACA,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMS,gBAAgB,GAAIC,aAAa,IAAK;IAC1CF,QAAQ,CAACG,aAAa,CAACD,aAAa,CAAC,CAAC;EACxC,CAAC;;EAED;EACA,MAAME,iBAAiB,GAAIC,QAAQ,IAAK;IACtCL,QAAQ,CAACM,aAAa,CAACD,QAAQ,CAAC,CAAC;EACnC,CAAC;;EAED;EACA,MAAME,qBAAqB,GAAGA,CAAA,KAAM;IAClCP,QAAQ,CAACQ,UAAU,CAAC,CAAC,CAAC;EACxB,CAAC;EAED,oBACEd,OAAA;IAAAe,QAAA,gBAEEf,OAAA;MACEgB,OAAO,EAAEA,CAAA,KACPT,gBAAgB,CAAC;QACfU,EAAE,EAAE,UAAU;QACdC,SAAS,EAAE;QACX;MACF,CAAC,CACF;MAAAH,QAAA,EACF;IAED;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAGRnB,WAAW,CAACoB,KAAK,CAACC,GAAG,CAAEC,IAAI,iBAC1BzB,OAAA;MAAAe,QAAA,eAEEf,OAAA;QAAQgB,OAAO,EAAEA,CAAA,KAAMN,iBAAiB,CAACe,IAAI,CAACR,EAAE,CAAE;QAAAF,QAAA,EAAC;MAAiB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC,GAFrEG,IAAI,CAACR,EAAE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGZ,CACN,CAAC,eAGFtB,OAAA;MAAQgB,OAAO,EAAEH,qBAAsB;MAAAE,QAAA,EAAC;IAAiB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/D,CAAC;AAEV;AAACpB,EAAA,CAjDQD,WAAW;EAAA,QAEEJ,WAAW,EAGdC,WAAW;AAAA;AAAA4B,EAAA,GALrBzB,WAAW;AAmDpB,eAAeA,WAAW;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}