{"ast":null,"code":"// import _ from 'lodash';\nimport { createAction, createSlice } from '@reduxjs/toolkit';\nimport { CLEAR_DRAWERS, ADD_OBSERVER, REMOVE_OBSERVER, NOTIFY_OBSERVERS, PRESENT_DRAWER, DISMISS_DRAWER, DISMISS_ALL } from './DrawerAction';\nimport { DrawerPosition, DrawerSize, DrawerTransitionName } from './types';\nimport uuid from 'react-uuid';\ncreateAction(CLEAR_DRAWERS);\ncreateAction(ADD_OBSERVER);\ncreateAction(REMOVE_OBSERVER);\ncreateAction(NOTIFY_OBSERVERS);\ncreateAction(PRESENT_DRAWER);\ncreateAction(DISMISS_DRAWER);\ncreateAction(DISMISS_ALL);\nconst initialState = {\n  items: [],\n  observers: []\n};\nexport const drawerSlice = createSlice({\n  name: 'drawer',\n  initialState,\n  reducers: {\n    clearDrawers: state => {\n      state.items = [];\n      state.observers = [];\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(CLEAR_DRAWERS, state => {\n      state.items = [];\n      state.observers = [];\n    });\n    builder.addCase(ADD_OBSERVER, (state, action) => {\n      const observer = {\n        id: uuid(),\n        handler: action.payload.handler\n      };\n      state.observers = [...state.observers, observer];\n    });\n    builder.addCase(REMOVE_OBSERVER, (state, action) => {\n      state.observers = state.observers.filter(observer => observer.id !== action.payload.observerId);\n    });\n    builder.addCase(NOTIFY_OBSERVERS, (state, action) => {\n      state.observers.forEach(observe => observe.handler(action.payload.action, action.payload.options));\n    });\n    builder.addCase(PRESENT_DRAWER, (state, action) => {\n      var _action$payload$id, _action$payload$useMo, _action$payload$useCl, _action$payload$canCl, _action$payload$posit, _action$payload$size, _action$payload$backg, _action$payload$noPad, _action$payload$anima;\n      const drawerItem = {\n        id: (_action$payload$id = action.payload.id) !== null && _action$payload$id !== void 0 ? _action$payload$id : uuid(),\n        ...action.payload,\n        useModal: (_action$payload$useMo = action.payload.useModal) !== null && _action$payload$useMo !== void 0 ? _action$payload$useMo : true,\n        useCloseButton: (_action$payload$useCl = action.payload.useCloseButton) !== null && _action$payload$useCl !== void 0 ? _action$payload$useCl : true,\n        canCloseForModal: (_action$payload$canCl = action.payload.canCloseForModal) !== null && _action$payload$canCl !== void 0 ? _action$payload$canCl : true,\n        position: (_action$payload$posit = action.payload.position) !== null && _action$payload$posit !== void 0 ? _action$payload$posit : DrawerPosition.BOTTOM,\n        size: (_action$payload$size = action.payload.size) !== null && _action$payload$size !== void 0 ? _action$payload$size : DrawerSize.AUTO,\n        backgroundColor: (_action$payload$backg = action.payload.backgroundColor) !== null && _action$payload$backg !== void 0 ? _action$payload$backg : 'white',\n        noPadding: (_action$payload$noPad = action.payload.noPadding) !== null && _action$payload$noPad !== void 0 ? _action$payload$noPad : false,\n        animationName: (_action$payload$anima = action.payload.animationName) !== null && _action$payload$anima !== void 0 ? _action$payload$anima : DrawerTransitionName.DEFAULT,\n        component: action.payload.component\n      };\n      state.items = [...state.items, drawerItem];\n    });\n    builder.addCase(DISMISS_DRAWER, (state, action) => {\n      const remainingItems = state.items.filter(item => item.id !== action.payload.id);\n      state.items = remainingItems;\n    });\n    builder.addCase(DISMISS_ALL, state => {\n      setTimeout(() => {\n        console.log('###');\n        state.items = [];\n      }, 350);\n    });\n  }\n});\n\n// const initialState = {\n//   items: [],\n//   observers: [],\n// };\n\n// const drawerReducer = (state = initialState, action: any) => {\n//   switch (action.type) {\n//     case CLEAR_DRAWERS:\n//       return {\n//         ...state,\n//         items: [],\n//         observers: [],\n//       };\n//     case ADD_OBSERVER:\n//       const observer = {\n//         id: 1,\n//         handler: action.payload.handler,\n//       };\n//       return {\n//         ...state,\n//         observers: [...state.observers, observer],\n//       };\n//     case REMOVE_OBSERVER:\n//       return {\n//         ...state,\n//         observers: state.observers.filter((observer: any) => observer.id !== action.payload.observerId),\n//       };\n//     case NOTIFY_OBSERVERS:\n//       state.observers.forEach((observe: any) => observe.handler(action.payload.action, action.payload.options));\n//       return state;\n//     case PRESENT_DRAWER:\n//       const drawerItem = {\n//         id: action.payload.id ?? 1,\n//         ...action.payload,\n//         useModal: action.payload.useModal ?? true,\n//         useCloseButton: action.payload.useCloseButton ?? true,\n//         canCloseForModal: action.payload.canCloseForModal ?? true,\n//         position: action.payload.position ?? DrawerPosition.BOTTOM,\n//         size: action.payload.size ?? DrawerSize.AUTO,\n//         backgroundColor: action.payload.backgroundColor ?? 'white',\n//         noPadding: action.payload.noPadding ?? false,\n//         animationName: action.payload.animationName ?? DrawerTransitionName.DEFAULT,\n//         component: action.payload.component,\n//       };\n//       return {\n//         ...state,\n//         items: [...state.items, drawerItem],\n//       };\n//     case DISMISS_DRAWER:\n//       const remainingItems = state.items.filter((item: any) => item.id !== action.payload.id);\n//       return {\n//         ...state,\n//         items: remainingItems,\n//       };\n//     case DISMISS_ALL:\n//       return {\n//         ...state,\n//         items: [],\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// export default drawerReducer;","map":{"version":3,"names":["createAction","createSlice","CLEAR_DRAWERS","ADD_OBSERVER","REMOVE_OBSERVER","NOTIFY_OBSERVERS","PRESENT_DRAWER","DISMISS_DRAWER","DISMISS_ALL","DrawerPosition","DrawerSize","DrawerTransitionName","uuid","initialState","items","observers","drawerSlice","name","reducers","clearDrawers","state","extraReducers","builder","addCase","action","observer","id","handler","payload","filter","observerId","forEach","observe","options","_action$payload$id","_action$payload$useMo","_action$payload$useCl","_action$payload$canCl","_action$payload$posit","_action$payload$size","_action$payload$backg","_action$payload$noPad","_action$payload$anima","drawerItem","useModal","useCloseButton","canCloseForModal","position","BOTTOM","size","AUTO","backgroundColor","noPadding","animationName","DEFAULT","component","remainingItems","item","setTimeout","console","log"],"sources":["/Users/iseung-won/Desktop/clone/frontend/src/components/drawer/DrawerReducer.ts"],"sourcesContent":["// import _ from 'lodash';\nimport { createAction, createReducer, createSlice } from '@reduxjs/toolkit';\nimport {\n  CLEAR_DRAWERS,\n  ADD_OBSERVER,\n  REMOVE_OBSERVER,\n  NOTIFY_OBSERVERS,\n  PRESENT_DRAWER,\n  DISMISS_DRAWER,\n  DISMISS_ALL,\n} from './DrawerAction';\nimport { DrawerPosition, DrawerSize, DrawerTransitionName } from './types';\nimport uuid from 'react-uuid';\n\ncreateAction(CLEAR_DRAWERS);\ncreateAction(ADD_OBSERVER);\ncreateAction(REMOVE_OBSERVER);\ncreateAction(NOTIFY_OBSERVERS);\ncreateAction(PRESENT_DRAWER);\ncreateAction(DISMISS_DRAWER);\ncreateAction(DISMISS_ALL);\n\nconst initialState = {\n  items: [],\n  observers: [],\n};\n\nexport const drawerSlice = createSlice({\n  name: 'drawer',\n  initialState,\n  reducers: {\n    clearDrawers: (state) => {\n      state.items = [];\n      state.observers = [];\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(CLEAR_DRAWERS, (state) => {\n      state.items = [];\n      state.observers = [];\n    });\n    builder.addCase(ADD_OBSERVER, (state: any, action: any) => {\n      const observer = {\n        id: uuid(),\n        handler: action.payload.handler,\n      };\n      state.observers = [...state.observers, observer];\n    });\n    builder.addCase(REMOVE_OBSERVER, (state, action: any) => {\n      state.observers = state.observers.filter((observer: any) => observer.id !== action.payload.observerId);\n    });\n    builder.addCase(NOTIFY_OBSERVERS, (state, action: any) => {\n      state.observers.forEach((observe: any) => observe.handler(action.payload.action, action.payload.options));\n    });\n    builder.addCase(PRESENT_DRAWER, (state: any, action: any) => {\n      const drawerItem = {\n        id: action.payload.id ?? uuid(),\n        ...action.payload,\n        useModal: action.payload.useModal ?? true,\n        useCloseButton: action.payload.useCloseButton ?? true,\n        canCloseForModal: action.payload.canCloseForModal ?? true,\n        position: action.payload.position ?? DrawerPosition.BOTTOM,\n        size: action.payload.size ?? DrawerSize.AUTO,\n        backgroundColor: action.payload.backgroundColor ?? 'white',\n        noPadding: action.payload.noPadding ?? false,\n        animationName: action.payload.animationName ?? DrawerTransitionName.DEFAULT,\n        component: action.payload.component,\n      };\n      state.items = [...state.items, drawerItem];\n    });\n    builder.addCase(DISMISS_DRAWER, (state, action: any) => {\n      const remainingItems = state.items.filter((item: any) => item.id !== action.payload.id);\n      state.items = remainingItems;\n    });\n    builder.addCase(DISMISS_ALL, (state) => {\n      setTimeout(() => {\n        console.log('###');\n        state.items = [];\n      }, 350);\n    });\n  },\n});\n\n// const initialState = {\n//   items: [],\n//   observers: [],\n// };\n\n// const drawerReducer = (state = initialState, action: any) => {\n//   switch (action.type) {\n//     case CLEAR_DRAWERS:\n//       return {\n//         ...state,\n//         items: [],\n//         observers: [],\n//       };\n//     case ADD_OBSERVER:\n//       const observer = {\n//         id: 1,\n//         handler: action.payload.handler,\n//       };\n//       return {\n//         ...state,\n//         observers: [...state.observers, observer],\n//       };\n//     case REMOVE_OBSERVER:\n//       return {\n//         ...state,\n//         observers: state.observers.filter((observer: any) => observer.id !== action.payload.observerId),\n//       };\n//     case NOTIFY_OBSERVERS:\n//       state.observers.forEach((observe: any) => observe.handler(action.payload.action, action.payload.options));\n//       return state;\n//     case PRESENT_DRAWER:\n//       const drawerItem = {\n//         id: action.payload.id ?? 1,\n//         ...action.payload,\n//         useModal: action.payload.useModal ?? true,\n//         useCloseButton: action.payload.useCloseButton ?? true,\n//         canCloseForModal: action.payload.canCloseForModal ?? true,\n//         position: action.payload.position ?? DrawerPosition.BOTTOM,\n//         size: action.payload.size ?? DrawerSize.AUTO,\n//         backgroundColor: action.payload.backgroundColor ?? 'white',\n//         noPadding: action.payload.noPadding ?? false,\n//         animationName: action.payload.animationName ?? DrawerTransitionName.DEFAULT,\n//         component: action.payload.component,\n//       };\n//       return {\n//         ...state,\n//         items: [...state.items, drawerItem],\n//       };\n//     case DISMISS_DRAWER:\n//       const remainingItems = state.items.filter((item: any) => item.id !== action.payload.id);\n//       return {\n//         ...state,\n//         items: remainingItems,\n//       };\n//     case DISMISS_ALL:\n//       return {\n//         ...state,\n//         items: [],\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// export default drawerReducer;\n"],"mappings":"AAAA;AACA,SAASA,YAAY,EAAiBC,WAAW,QAAQ,kBAAkB;AAC3E,SACEC,aAAa,EACbC,YAAY,EACZC,eAAe,EACfC,gBAAgB,EAChBC,cAAc,EACdC,cAAc,EACdC,WAAW,QACN,gBAAgB;AACvB,SAASC,cAAc,EAAEC,UAAU,EAAEC,oBAAoB,QAAQ,SAAS;AAC1E,OAAOC,IAAI,MAAM,YAAY;AAE7BZ,YAAY,CAACE,aAAa,CAAC;AAC3BF,YAAY,CAACG,YAAY,CAAC;AAC1BH,YAAY,CAACI,eAAe,CAAC;AAC7BJ,YAAY,CAACK,gBAAgB,CAAC;AAC9BL,YAAY,CAACM,cAAc,CAAC;AAC5BN,YAAY,CAACO,cAAc,CAAC;AAC5BP,YAAY,CAACQ,WAAW,CAAC;AAEzB,MAAMK,YAAY,GAAG;EACnBC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE;AACb,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGf,WAAW,CAAC;EACrCgB,IAAI,EAAE,QAAQ;EACdJ,YAAY;EACZK,QAAQ,EAAE;IACRC,YAAY,EAAGC,KAAK,IAAK;MACvBA,KAAK,CAACN,KAAK,GAAG,EAAE;MAChBM,KAAK,CAACL,SAAS,GAAG,EAAE;IACtB;EACF,CAAC;EACDM,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACrB,aAAa,EAAGkB,KAAK,IAAK;MACxCA,KAAK,CAACN,KAAK,GAAG,EAAE;MAChBM,KAAK,CAACL,SAAS,GAAG,EAAE;IACtB,CAAC,CAAC;IACFO,OAAO,CAACC,OAAO,CAACpB,YAAY,EAAE,CAACiB,KAAU,EAAEI,MAAW,KAAK;MACzD,MAAMC,QAAQ,GAAG;QACfC,EAAE,EAAEd,IAAI,CAAC,CAAC;QACVe,OAAO,EAAEH,MAAM,CAACI,OAAO,CAACD;MAC1B,CAAC;MACDP,KAAK,CAACL,SAAS,GAAG,CAAC,GAAGK,KAAK,CAACL,SAAS,EAAEU,QAAQ,CAAC;IAClD,CAAC,CAAC;IACFH,OAAO,CAACC,OAAO,CAACnB,eAAe,EAAE,CAACgB,KAAK,EAAEI,MAAW,KAAK;MACvDJ,KAAK,CAACL,SAAS,GAAGK,KAAK,CAACL,SAAS,CAACc,MAAM,CAAEJ,QAAa,IAAKA,QAAQ,CAACC,EAAE,KAAKF,MAAM,CAACI,OAAO,CAACE,UAAU,CAAC;IACxG,CAAC,CAAC;IACFR,OAAO,CAACC,OAAO,CAAClB,gBAAgB,EAAE,CAACe,KAAK,EAAEI,MAAW,KAAK;MACxDJ,KAAK,CAACL,SAAS,CAACgB,OAAO,CAAEC,OAAY,IAAKA,OAAO,CAACL,OAAO,CAACH,MAAM,CAACI,OAAO,CAACJ,MAAM,EAAEA,MAAM,CAACI,OAAO,CAACK,OAAO,CAAC,CAAC;IAC3G,CAAC,CAAC;IACFX,OAAO,CAACC,OAAO,CAACjB,cAAc,EAAE,CAACc,KAAU,EAAEI,MAAW,KAAK;MAAA,IAAAU,kBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,oBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA;MAC3D,MAAMC,UAAU,GAAG;QACjBjB,EAAE,GAAAQ,kBAAA,GAAEV,MAAM,CAACI,OAAO,CAACF,EAAE,cAAAQ,kBAAA,cAAAA,kBAAA,GAAItB,IAAI,CAAC,CAAC;QAC/B,GAAGY,MAAM,CAACI,OAAO;QACjBgB,QAAQ,GAAAT,qBAAA,GAAEX,MAAM,CAACI,OAAO,CAACgB,QAAQ,cAAAT,qBAAA,cAAAA,qBAAA,GAAI,IAAI;QACzCU,cAAc,GAAAT,qBAAA,GAAEZ,MAAM,CAACI,OAAO,CAACiB,cAAc,cAAAT,qBAAA,cAAAA,qBAAA,GAAI,IAAI;QACrDU,gBAAgB,GAAAT,qBAAA,GAAEb,MAAM,CAACI,OAAO,CAACkB,gBAAgB,cAAAT,qBAAA,cAAAA,qBAAA,GAAI,IAAI;QACzDU,QAAQ,GAAAT,qBAAA,GAAEd,MAAM,CAACI,OAAO,CAACmB,QAAQ,cAAAT,qBAAA,cAAAA,qBAAA,GAAI7B,cAAc,CAACuC,MAAM;QAC1DC,IAAI,GAAAV,oBAAA,GAAEf,MAAM,CAACI,OAAO,CAACqB,IAAI,cAAAV,oBAAA,cAAAA,oBAAA,GAAI7B,UAAU,CAACwC,IAAI;QAC5CC,eAAe,GAAAX,qBAAA,GAAEhB,MAAM,CAACI,OAAO,CAACuB,eAAe,cAAAX,qBAAA,cAAAA,qBAAA,GAAI,OAAO;QAC1DY,SAAS,GAAAX,qBAAA,GAAEjB,MAAM,CAACI,OAAO,CAACwB,SAAS,cAAAX,qBAAA,cAAAA,qBAAA,GAAI,KAAK;QAC5CY,aAAa,GAAAX,qBAAA,GAAElB,MAAM,CAACI,OAAO,CAACyB,aAAa,cAAAX,qBAAA,cAAAA,qBAAA,GAAI/B,oBAAoB,CAAC2C,OAAO;QAC3EC,SAAS,EAAE/B,MAAM,CAACI,OAAO,CAAC2B;MAC5B,CAAC;MACDnC,KAAK,CAACN,KAAK,GAAG,CAAC,GAAGM,KAAK,CAACN,KAAK,EAAE6B,UAAU,CAAC;IAC5C,CAAC,CAAC;IACFrB,OAAO,CAACC,OAAO,CAAChB,cAAc,EAAE,CAACa,KAAK,EAAEI,MAAW,KAAK;MACtD,MAAMgC,cAAc,GAAGpC,KAAK,CAACN,KAAK,CAACe,MAAM,CAAE4B,IAAS,IAAKA,IAAI,CAAC/B,EAAE,KAAKF,MAAM,CAACI,OAAO,CAACF,EAAE,CAAC;MACvFN,KAAK,CAACN,KAAK,GAAG0C,cAAc;IAC9B,CAAC,CAAC;IACFlC,OAAO,CAACC,OAAO,CAACf,WAAW,EAAGY,KAAK,IAAK;MACtCsC,UAAU,CAAC,MAAM;QACfC,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;QAClBxC,KAAK,CAACN,KAAK,GAAG,EAAE;MAClB,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}