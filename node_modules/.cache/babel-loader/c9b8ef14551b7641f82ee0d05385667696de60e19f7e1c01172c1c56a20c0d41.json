{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\n// Assumes that you have a corresponding DrawerItem in React\nimport './Drawer.scss';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Drawer = ({\n  observerHandler\n}) => {\n  _s();\n  const [items, setItems] = useState([]); // This would ideally come from some React context or global state\n\n  const useModal = useMemo(() => {\n    const modalItems = items.filter(item => item.useModal !== false);\n    return modalItems.length > 0;\n  }, [items]);\n  useEffect(() => {\n    if (observerHandler) {\n      // Assuming you have a similar structure to 'addObserver' in your React code\n      // drawerModule.addObserver(observerHandler);\n    }\n  }, [observerHandler]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  function closeDrawer() {\n    // Equivalent logic to drawerModule.dismissAll() goes here\n  }\n};\n_s(Drawer, \"uNuPoNc+WO58xeDYEm6bot56rnI=\");\n_c = Drawer;\nexport default Drawer;\nvar _c;\n$RefreshReg$(_c, \"Drawer\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","Fragment","_Fragment","jsxDEV","_jsxDEV","Drawer","observerHandler","_s","items","setItems","useModal","modalItems","filter","item","length","closeDrawer","_c","$RefreshReg$"],"sources":["/Users/iseung-won/Desktop/clone/frontend/src/components/drawer/components/Drawer.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport DrawerItem from './DrawerItem'; // Assumes that you have a corresponding DrawerItem in React\nimport './Drawer.scss';\n\nconst Drawer = ({ observerHandler }: any) => {\n  const [items, setItems] = useState([]); // This would ideally come from some React context or global state\n\n  const useModal = useMemo(() => {\n    const modalItems = items.filter((item: any) => item.useModal !== false);\n    return modalItems.length > 0;\n  }, [items]);\n\n  useEffect(() => {\n    if (observerHandler) {\n      // Assuming you have a similar structure to 'addObserver' in your React code\n      // drawerModule.addObserver(observerHandler);\n    }\n  }, [observerHandler]);\n\n  return (\n    <>\n      {/* <div className=\"drawer-container\">\n        {items.length !== 0 && <div onClick={closeDrawer} className=\"drawer-bg\"></div>}\n        <ul>\n          {items.map((item: any) => (\n            <DrawerItem key={item.id} payload={item} />\n          ))}\n        </ul>\n      </div> */}\n    </>\n  );\n\n  function closeDrawer() {\n    // Equivalent logic to drawerModule.dismissAll() goes here\n  }\n};\n\nexport default Drawer;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AACpB;AACvC,OAAO,eAAe;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,MAAM,GAAGA,CAAC;EAAEC;AAAqB,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAExC,MAAMY,QAAQ,GAAGV,OAAO,CAAC,MAAM;IAC7B,MAAMW,UAAU,GAAGH,KAAK,CAACI,MAAM,CAAEC,IAAS,IAAKA,IAAI,CAACH,QAAQ,KAAK,KAAK,CAAC;IACvE,OAAOC,UAAU,CAACG,MAAM,GAAG,CAAC;EAC9B,CAAC,EAAE,CAACN,KAAK,CAAC,CAAC;EAEXT,SAAS,CAAC,MAAM;IACd,IAAIO,eAAe,EAAE;MACnB;MACA;IAAA;EAEJ,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;EAErB,oBACEF,OAAA,CAAAF,SAAA,mBASE,CAAC;EAGL,SAASa,WAAWA,CAAA,EAAG;IACrB;EAAA;AAEJ,CAAC;AAACR,EAAA,CA/BIF,MAAM;AAAAW,EAAA,GAANX,MAAM;AAiCZ,eAAeA,MAAM;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}