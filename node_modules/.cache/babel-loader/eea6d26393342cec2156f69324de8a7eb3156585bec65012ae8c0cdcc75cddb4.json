{"ast":null,"code":"var _jsxFileName = \"/Users/iseung-won/Desktop/clone/frontend/src/components/drawer/components/Drawer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport DrawerItem from './DrawerItem'; // Assumes that you have a corresponding DrawerItem in React\nimport './Drawer.scss';\nimport { useAppDispatch } from '../../../redux/store';\nimport { dismissAll } from '../DrawerAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Drawer = ({\n  observerHandler,\n  items\n}) => {\n  _s();\n  // This would ideally come from some React context or global state\n\n  const [isClose, setIsClose] = useState(false);\n  const useModal = useMemo(() => {\n    const modalItems = items.filter(item => item.useModal !== false);\n    return modalItems.length > 0;\n  }, [items]);\n  const dispatch = useAppDispatch();\n  function closeDrawer() {\n    setTimeout(() => {\n      dispatch(dismissAll());\n    }, 350);\n\n    // Equivalent logic to drawerModule.dismissAll() goes here\n  }\n\n  useEffect(() => {\n    if (observerHandler) {\n      // Assuming you have a similar structure to 'addObserver' in your React code\n      // drawerModule.addObserver(observerHandler);\n    }\n  }, [observerHandler]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drawer-container\",\n      children: [items.length !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: closeDrawer,\n        className: \"drawer-bg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: items.map(item => /*#__PURE__*/_jsxDEV(DrawerItem, {\n          payload: item\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Drawer, \"qvReooSn8b8Giexhp+yGpLlkjPE=\", false, function () {\n  return [useAppDispatch];\n});\n_c = Drawer;\nexport default Drawer;\nvar _c;\n$RefreshReg$(_c, \"Drawer\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","DrawerItem","useAppDispatch","dismissAll","jsxDEV","_jsxDEV","Fragment","_Fragment","Drawer","observerHandler","items","_s","isClose","setIsClose","useModal","modalItems","filter","item","length","dispatch","closeDrawer","setTimeout","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","payload","id","_c","$RefreshReg$"],"sources":["/Users/iseung-won/Desktop/clone/frontend/src/components/drawer/components/Drawer.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport DrawerItem from './DrawerItem'; // Assumes that you have a corresponding DrawerItem in React\nimport './Drawer.scss';\nimport { useAppDispatch } from '../../../redux/store';\nimport { dismissAll } from '../DrawerAction';\n\nconst Drawer = ({ observerHandler, items }: any) => {\n  // This would ideally come from some React context or global state\n\n  const [isClose, setIsClose] = useState(false);\n\n  const useModal = useMemo(() => {\n    const modalItems = items.filter((item: any) => item.useModal !== false);\n    return modalItems.length > 0;\n  }, [items]);\n\n  const dispatch = useAppDispatch();\n  function closeDrawer() {\n    setTimeout(() => {\n      dispatch(dismissAll());\n    }, 350);\n\n    // Equivalent logic to drawerModule.dismissAll() goes here\n  }\n\n  useEffect(() => {\n    if (observerHandler) {\n      // Assuming you have a similar structure to 'addObserver' in your React code\n      // drawerModule.addObserver(observerHandler);\n    }\n  }, [observerHandler]);\n\n  return (\n    <>\n      <div className=\"drawer-container\">\n        {items.length !== 0 && <div onClick={closeDrawer} className=\"drawer-bg\"></div>}\n        <ul>\n          {items.map((item: any) => (\n            <DrawerItem key={item.id} payload={item} />\n          ))}\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default Drawer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC3D,OAAOC,UAAU,MAAM,cAAc,CAAC,CAAC;AACvC,OAAO,eAAe;AACtB,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,UAAU,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE7C,MAAMC,MAAM,GAAGA,CAAC;EAAEC,eAAe;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAClD;;EAEA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMgB,QAAQ,GAAGd,OAAO,CAAC,MAAM;IAC7B,MAAMe,UAAU,GAAGL,KAAK,CAACM,MAAM,CAAEC,IAAS,IAAKA,IAAI,CAACH,QAAQ,KAAK,KAAK,CAAC;IACvE,OAAOC,UAAU,CAACG,MAAM,GAAG,CAAC;EAC9B,CAAC,EAAE,CAACR,KAAK,CAAC,CAAC;EAEX,MAAMS,QAAQ,GAAGjB,cAAc,CAAC,CAAC;EACjC,SAASkB,WAAWA,CAAA,EAAG;IACrBC,UAAU,CAAC,MAAM;MACfF,QAAQ,CAAChB,UAAU,CAAC,CAAC,CAAC;IACxB,CAAC,EAAE,GAAG,CAAC;;IAEP;EACF;;EAEAJ,SAAS,CAAC,MAAM;IACd,IAAIU,eAAe,EAAE;MACnB;MACA;IAAA;EAEJ,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;EAErB,oBACEJ,OAAA,CAAAE,SAAA;IAAAe,QAAA,eACEjB,OAAA;MAAKkB,SAAS,EAAC,kBAAkB;MAAAD,QAAA,GAC9BZ,KAAK,CAACQ,MAAM,KAAK,CAAC,iBAAIb,OAAA;QAAKmB,OAAO,EAAEJ,WAAY;QAACG,SAAS,EAAC;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC9EvB,OAAA;QAAAiB,QAAA,EACGZ,KAAK,CAACmB,GAAG,CAAEZ,IAAS,iBACnBZ,OAAA,CAACJ,UAAU;UAAe6B,OAAO,EAAEb;QAAK,GAAvBA,IAAI,CAACc,EAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAkB,CAC3C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF;EAAC,gBACN,CAAC;AAEP,CAAC;AAACjB,EAAA,CAtCIH,MAAM;EAAA,QAUON,cAAc;AAAA;AAAA8B,EAAA,GAV3BxB,MAAM;AAwCZ,eAAeA,MAAM;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}